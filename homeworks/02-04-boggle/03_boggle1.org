** Functions to implement

A =legalMoves(moves, path)= function. Takes in a list of possible moves
as well as a path (list of x-y pairs) of places you've already been,
and essentially subtracts the latter from the former: the only legal
moves are possible moves minus any places that you've already been.

#+begin_src python
>>> legalMoves(possibleMoves((1,2),myBoard), ((1,0),(2,0),(2,1),(2,2)))
{(0, 1), (1, 3), (1, 1), (2, 3), (0, 3), (0, 2)}

>>> legalMoves(possibleMoves((2,2),myBoard), ((1,1),(1,2),(1,3),(2,3),(3,2)))
{(3, 1), (3, 3), (2, 1)}
#+end_src

A =readDictionary(filename)= function which reads the dictionary into
python as a list.

An =examineState(myBoard, position, path, myDict)= function that takes in a
boggle board, a current position, a path up to that position, and a
dictionary. It adds the current position's tile to the path, computes
the word now formed by that path, and returns a tuple of (<current
word generated>, <True/False depending on whether that word is in
dictionary>).

#+begin_src python
>>> examineState(myBoard, (0,3), ((1,1),(0,1),(0,2)), myDict)
('mopy', True)

>>> examineState(myBoard, (0,0), ((3,3),(2,2),(1,1)), myDict)
('uemj', False)

>>> examineState(myBoard,(3,3),( (2,2),(2,1),(2,0),(3,0),(3,1),(3,2) ) ,myDict)
('efxpgvu', False)
#+end_src

A =runBoard(board_filename,dictionary_filename)= function which
provides output as below.

#+begin_src python
>>> runBoard("board4.txt", "twl06.txt")
Y W A B
Y X I D
Q M D J
P L N A

And we're off!
Running with cleverness  ON 
All done

Searched total of 944 moves in  0.003 seconds

Words found:
2 -letter words:  AI, ID, AN, AD, NA, BA, AB, BI, XI, AX, AW, MI, MY
3 -letter words:  BAD, IMP, AIM, DAW, BID, AND, ADD, DIB, WAX, DID, WAB, DAB, DAN, MIX, MID, JIB, DIM, MIB, WAD, AID
4 -letter words:  JIMP, WADI, WAXY, WIMP
5 -letter words:  ADMIX, ADDAX

Found  39  words in total. 
Alpha-sorted list words:
AB, AD, ADD, ADDAX, ADMIX, AI, AID, AIM, AN, AND, AW, AX, BA, BAD, BI, BID, DAB, DAN, DAW, DIB, DID, DIM, ID, IMP, JIB, JIMP, MI, MIB, MID, MIX, MY, NA, WAB, WAD, WADI, WAX, WAXY, WIMP, XI
#+end_src

** Test file to modify

[[file:03_tests.py]]

** FAQ

When is a for loop preferable over a list comprehension? List
comprehensions can be preferable for simple cases (one return value,
fits on one line of code), but for loops should be preferred for more
complex cases (several values to build in for loop, not easy to fit on
one line of code).
