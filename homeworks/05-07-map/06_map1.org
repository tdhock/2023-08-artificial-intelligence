Route-finding part 1

Printout of your program output running the [[file:10test.txt][10test.txt]] and
[[file:50test.txt]] maps using the four search types. Add your code to the
top of [[file:06_tests.py][06_tests.py]], and submit a PDF with the code and
output. Some things to remember:

- In verbose mode, where you print your OPEN list, data for each
  "node" shown in the list must show, *in the following order*,
  (nodelabel, node depth from root, g(n) -- path cost of node n, h(n)
  heuristic/straight-line-distance to goal for node n, f(n) -- total
  cost for A*). The latter float values should be formated to one or
  two decimals for compactness. See my sample outputs below.
- *Avoiding Cycles:* you should implement some logic to avoid infinite
  loop in depth first search. The logic I implemented to get the
  output below is: when you expand a search node, add its label to an
  alreadyExplored list. Make sure that the successor function does not
  return any nodes that are alreadyExplored.
- *Handling Duplicates:* The code which produces the output
  below used insert_ methods which ensure there are no two search
  nodes with the same label, in the open/frontier list. So if you want
  to get the exact same results as below (recommended but not required
  to get the search to work), you will have to implement that. If you
  are inserting a child node that already exists in OPEN list (already
  another path to it found earlier) you only keep one copy. For Best
  and A*, the algorithm is clear: you keep only the "better" of the
  two. For breadth/depth first, we will do the following for
  consistency: breadth-first, drop the new child (keep the existing
  node); for depth-first, keep the new child, drop existing.

Some expected output if you implement the removal of duplicates:

#+begin_src python
>>> x=Searcher("10test.txt", searchType="DEPTH", verbose=True)
Loaded search type DEPTH with map in file: 10test.txt
>>> x.setStartGoal('h','k')
>>> x.search()
Exploring node: H
inserting new children: ['A', 'D', 'J']
Open list: ['A;1;72; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: A
inserting new children: ['E', 'G']
Open list: ['E;2;680; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: E
inserting new children: ['C']
Open list: ['C;3;973; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: C
inserting new children: ['F', 'I', 'K', 'L']
Open list: ['F;4;1251; 0.00; 0.00', 'I;4;1264; 0.00; 0.00', 'K;4;1243; 0.00; 0.00', 'L;4;1107; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: F
inserting new children: ['J', 'L']
Open list: ['J;5;1378; 0.00; 0.00', 'L;5;1528; 0.00; 0.00', 'I;4;1264; 0.00; 0.00', 'K;4;1243; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00']
Exploring node: J
inserting new children: ['L']
Open list: ['L;6;1571; 0.00; 0.00', 'I;4;1264; 0.00; 0.00', 'K;4;1243; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00']
Exploring node: L
inserting new children: []
Open list: ['I;4;1264; 0.00; 0.00', 'K;4;1243; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00']
Exploring node: I
inserting new children: ['B', 'D']
Open list: ['B;5;1773; 0.00; 0.00', 'D;5;1641; 0.00; 0.00', 'K;4;1243; 0.00; 0.00', 'G;2;199; 0.00; 0.00']
Exploring node: B
inserting new children: ['D', 'G']
Open list: ['D;6;2048; 0.00; 0.00', 'G;6;2008; 0.00; 0.00', 'K;4;1243; 0.00; 0.00']
Exploring node: D
inserting new children: []
Open list: ['G;6;2008; 0.00; 0.00', 'K;4;1243; 0.00; 0.00']
Exploring node: G
inserting new children: []
Open list: ['K;4;1243; 0.00; 0.00']
Exploring node: K
Success! Reached goal node K with path: ['H', 'A', 'E', 'C', 'K']
0
>>> x=Searcher("10test.txt", searchType="BREADTH", verbose=True)
Loaded search type BREADTH with map in file: 10test.txt
>>> x.setStartGoal('h','k')
>>> x.search()
Exploring node: H
inserting new children: ['A', 'D', 'J']
Open list: ['A;1;72; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: A
inserting new children: ['E', 'G']
Open list: ['D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00', 'E;2;680; 0.00; 0.00', 'G;2;199; 0.00; 0.00']
Exploring node: D
inserting new children: ['B', 'I']
Open list: ['J;1;223; 0.00; 0.00', 'E;2;680; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'B;2;410; 0.00; 0.00', 'I;2;512; 0.00; 0.00']
Exploring node: J
inserting new children: ['F', 'L']
Open list: ['E;2;680; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'B;2;410; 0.00; 0.00', 'I;2;512; 0.00; 0.00', 'F;2;350; 0.00; 0.00', 'L;2;416; 0.00; 0.00']
Exploring node: E
inserting new children: ['C']
Open list: ['G;2;199; 0.00; 0.00', 'B;2;410; 0.00; 0.00', 'I;2;512; 0.00; 0.00', 'F;2;350; 0.00; 0.00', 'L;2;416; 0.00; 0.00', 'C;3;973; 0.00; 0.00']
Exploring node: G
inserting new children: ['B']
Open list: ['B;2;410; 0.00; 0.00', 'I;2;512; 0.00; 0.00', 'F;2;350; 0.00; 0.00', 'L;2;416; 0.00; 0.00', 'C;3;973; 0.00; 0.00']
Exploring node: B
inserting new children: ['I']
Open list: ['I;2;512; 0.00; 0.00', 'F;2;350; 0.00; 0.00', 'L;2;416; 0.00; 0.00', 'C;3;973; 0.00; 0.00']
Exploring node: I
inserting new children: ['C']
Open list: ['F;2;350; 0.00; 0.00', 'L;2;416; 0.00; 0.00', 'C;3;973; 0.00; 0.00']
Exploring node: F
inserting new children: ['C', 'L']
Open list: ['L;2;416; 0.00; 0.00', 'C;3;973; 0.00; 0.00']
Exploring node: L
inserting new children: ['C']
Open list: ['C;3;973; 0.00; 0.00']
Exploring node: C
inserting new children: ['K']
Open list: ['K;4;1243; 0.00; 0.00']
Exploring node: K
Success! Reached goal node K with path: ['H', 'A', 'E', 'C', 'K']
0
>>> x=Searcher("10test.txt", searchType="BEST", verbose=True)
Loaded search type BEST with map in file: 10test.txt
>>> x.setStartGoal('h','k')
>>> x.search()
Exploring node: H
inserting new children: ['A', 'D', 'J']
Open list: ['J;1;223;504.47;504.47', 'D;1;135;596.16;596.16', 'A;1;72;710.03;710.03']
Exploring node: J
inserting new children: ['F', 'L']
Open list: ['L;2;416;349.17;349.17', 'F;2;350;495.23;495.23', 'D;1;135;596.16;596.16', 'A;1;72;710.03;710.03']
Exploring node: L
inserting new children: ['C', 'F']
Open list: ['C;3;550;230.79;230.79', 'F;2;350;495.23;495.23', 'D;1;135;596.16;596.16', 'A;1;72;710.03;710.03']
Exploring node: C
inserting new children: ['E', 'F', 'I', 'K']
Open list: ['K;4;820; 0.00; 0.00', 'E;4;843;295.63;295.63', 'I;4;841;383.71;383.71', 'F;2;350;495.23;495.23', 'D;1;135;596.16;596.16', 'A;1;72;710.03;710.03']
Exploring node: K
Success! Reached goal node K with path: ['H', 'J', 'L', 'C', 'K']
0
>>> x=Searcher("10test.txt", searchType="A*", verbose=True)
Loaded search type A* with map in file: 10test.txt
>>> x.setStartGoal('h','k')
>>> x.search()
Exploring node: H
inserting new children: ['A', 'D', 'J']
Open list: ['J;1;223;504.47;727.47', 'D;1;135;596.16;731.16', 'A;1;72;710.03;782.03']
Exploring node: J
inserting new children: ['F', 'L']
Open list: ['D;1;135;596.16;731.16', 'L;2;416;349.17;765.17', 'A;1;72;710.03;782.03', 'F;2;350;495.23;845.23']
Exploring node: D
inserting new children: ['B', 'I']
Open list: ['L;2;416;349.17;765.17', 'A;1;72;710.03;782.03', 'F;2;350;495.23;845.23', 'I;2;512;383.71;895.71', 'B;2;410;838.02;1248.02']
Exploring node: L
inserting new children: ['C', 'F']
Open list: ['C;3;550;230.79;780.79', 'A;1;72;710.03;782.03', 'F;2;350;495.23;845.23', 'I;2;512;383.71;895.71', 'B;2;410;838.02;1248.02']
Exploring node: C
inserting new children: ['E', 'F', 'I', 'K']
Open list: ['A;1;72;710.03;782.03', 'K;4;820; 0.00;820.00', 'F;2;350;495.23;845.23', 'I;2;512;383.71;895.71', 'E;4;843;295.63;1138.63', 'B;2;410;838.02;1248.02']
Exploring node: A
inserting new children: ['E', 'G']
Open list: ['K;4;820; 0.00;820.00', 'F;2;350;495.23;845.23', 'I;2;512;383.71;895.71', 'G;2;199;766.99;965.99', 'E;2;680;295.63;975.63', 'B;2;410;838.02;1248.02']
Exploring node: K
Success! Reached goal node K with path: ['H', 'J', 'L', 'C', 'K']
0
#+end_src

Some expected output if you allow duplicated labels in the open list:

#+begin_src python
>>> x=Searcher("10test.txt", searchType="DEPTH", verbose=True)
Loaded search type DEPTH with map in file: 10test.txt
>>> x.setStartGoal('h','k')
>>> x.search()
Exploring node: H
inserting new children: ['A', 'D', 'J']
Open list: ['A;1;72; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: A
inserting new children: ['E', 'G']
Open list: ['E;2;680; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: E
inserting new children: ['C']
Open list: ['C;3;973; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: C
inserting new children: ['F', 'I', 'K', 'L']
Open list: ['F;4;1251; 0.00; 0.00', 'I;4;1264; 0.00; 0.00', 'K;4;1243; 0.00; 0.00', 'L;4;1107; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: F
inserting new children: ['J', 'L']
Open list: ['J;5;1378; 0.00; 0.00', 'L;5;1528; 0.00; 0.00', 'I;4;1264; 0.00; 0.00', 'K;4;1243; 0.00; 0.00', 'L;4;1107; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: J
inserting new children: ['L']
Open list: ['L;6;1571; 0.00; 0.00', 'L;5;1528; 0.00; 0.00', 'I;4;1264; 0.00; 0.00', 'K;4;1243; 0.00; 0.00', 'L;4;1107; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: L
inserting new children: []
Open list: ['L;5;1528; 0.00; 0.00', 'I;4;1264; 0.00; 0.00', 'K;4;1243; 0.00; 0.00', 'L;4;1107; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: L
inserting new children: []
Open list: ['I;4;1264; 0.00; 0.00', 'K;4;1243; 0.00; 0.00', 'L;4;1107; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: I
inserting new children: ['B', 'D']
Open list: ['B;5;1773; 0.00; 0.00', 'D;5;1641; 0.00; 0.00', 'K;4;1243; 0.00; 0.00', 'L;4;1107; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: B
inserting new children: ['D', 'G']
Open list: ['D;6;2048; 0.00; 0.00', 'G;6;2008; 0.00; 0.00', 'D;5;1641; 0.00; 0.00', 'K;4;1243; 0.00; 0.00', 'L;4;1107; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: D
inserting new children: []
Open list: ['G;6;2008; 0.00; 0.00', 'D;5;1641; 0.00; 0.00', 'K;4;1243; 0.00; 0.00', 'L;4;1107; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: G
inserting new children: []
Open list: ['D;5;1641; 0.00; 0.00', 'K;4;1243; 0.00; 0.00', 'L;4;1107; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: D
inserting new children: []
Open list: ['K;4;1243; 0.00; 0.00', 'L;4;1107; 0.00; 0.00', 'G;2;199; 0.00; 0.00', 'D;1;135; 0.00; 0.00', 'J;1;223; 0.00; 0.00']
Exploring node: K
Success! Reached goal node K with path: ['H', 'A', 'E', 'C', 'K']
0
#+end_src

** Extra credit

In the search method, save the solution path to a text file:
- for input file called 10test.txt, solution file should be called
  10test_path.txt,
- for input file called x.txt, solution file should be called
  x_path.txt
- format of solution path output file should be plain text with one
  line, and a comma separating each city.
- Use the following code at the bottom of your python script, to get
  input arguments from the command line:

#+begin_src python
if __name__ == "__main__":
    prog, inFile, searchType, start, goal = sys.argv
    s=Searcher(inFile, searchType=searchType)
    s.setStartGoal(start, goal)
    s.search()
#+end_src

Implement a stats() method for your Searcher class, and use it to
report the following for each map and search type:

#+begin_src python
>>> x.stats()
Search Type: DEPTH.  Map file: 10test.txt  Total Nodes in Graph:12
Start node: H  ;  Goal node(s): ['K']
Searched total of 12 nodes out of total of 12 in graph
Ended at Node: K with path cost: 1243
Path (5): ['H', 'A', 'E', 'C', 'K']
  Frontier size: Average=  2.67 ; Max size= 6
  Depth of search:  Average=  3.83 ; Max Depth= 6
  Average branching factor=  2.75 

Order of Node Expansion: ['H', 'A', 'E', 'C', 'F', 'J', 'L', 'I', 'B', 'D', 'G', 'K']
#+end_src
