Route-finding part 1

Printout of your program output running the [[file:10test.txt][10test.txt]] and
[[file:50test.txt]] maps using the four search types. Add your code to the
top of [[file:06_tests.py][06_tests.py]], and submit a PDF with the code and
output. Some expected output:

#+begin_src python
>>> x=Searcher("10test.txt", searchType="DEPTH", verbose=True)
Loaded search type DEPTH with map in file: 10test.txt

>>> x.setStartGoal('h','k')

>>> x.search()
Exploring node: H
inserting new children: ['A', 'D', 'J']
Open list: ['A;1;72; 0.00;72.00', 'D;1;135; 0.00;135.00', 'J;1;223; 0.00;223.00']
Exploring node: A
inserting new children: ['E', 'G']
Open list: ['E;2;680; 0.00;680.00', 'G;2;199; 0.00;199.00', 'D;1;135; 0.00;135.00', 'J;1;223; 0.00;223.00']
Exploring node: E
inserting new children: ['C']
Open list: ['C;3;973; 0.00;973.00', 'G;2;199; 0.00;199.00', 'D;1;135; 0.00;135.00', 'J;1;223; 0.00;223.00']
Exploring node: C
inserting new children: ['F', 'I', 'K', 'L']
Open list: ['F;4;1251; 0.00;1251.00', 'I;4;1264; 0.00;1264.00', 'K;4;1243; 0.00;1243.00', 'L;4;1107; 0.00;1107.00', 'G;2;199; 0.00;199.00', 'D;1;135; 0.00;135.00', 'J;1;223; 0.00;223.00']
Exploring node: F
inserting new children: ['J', 'L']
Open list: ['J;5;1378; 0.00;1378.00', 'L;5;1528; 0.00;1528.00', 'I;4;1264; 0.00;1264.00', 'K;4;1243; 0.00;1243.00', 'G;2;199; 0.00;199.00', 'D;1;135; 0.00;135.00']
Exploring node: J
inserting new children: ['L']
Open list: ['L;6;1571; 0.00;1571.00', 'I;4;1264; 0.00;1264.00', 'K;4;1243; 0.00;1243.00', 'G;2;199; 0.00;199.00', 'D;1;135; 0.00;135.00']
Exploring node: L
inserting new children: []
Open list: ['I;4;1264; 0.00;1264.00', 'K;4;1243; 0.00;1243.00', 'G;2;199; 0.00;199.00', 'D;1;135; 0.00;135.00']
Exploring node: I
inserting new children: ['B', 'D']
Open list: ['B;5;1773; 0.00;1773.00', 'D;5;1641; 0.00;1641.00', 'K;4;1243; 0.00;1243.00', 'G;2;199; 0.00;199.00']
Exploring node: B
inserting new children: ['D', 'G']
Open list: ['D;6;2048; 0.00;2048.00', 'G;6;2008; 0.00;2008.00', 'K;4;1243; 0.00;1243.00']
Exploring node: D
inserting new children: []
Open list: ['G;6;2008; 0.00;2008.00', 'K;4;1243; 0.00;1243.00']
Exploring node: G
inserting new children: []
Open list: ['K;4;1243; 0.00;1243.00']
Exploring node: K
Success! Reached goal node K with path: ['H', 'A', 'E', 'C', 'K']

>>> x=Searcher("10test.txt", searchType="BREADTH", verbose=True)
Loaded search type BREADTH with map in file: 10test.txt

>>> x.setStartGoal('h','k')

>>> x.search()
Exploring node: H
inserting new children: ['A', 'D', 'J']
Open list: ['A;1;72; 0.00;72.00', 'D;1;135; 0.00;135.00', 'J;1;223; 0.00;223.00']
Exploring node: A
inserting new children: ['E', 'G']
Open list: ['D;1;135; 0.00;135.00', 'J;1;223; 0.00;223.00', 'E;2;680; 0.00;680.00', 'G;2;199; 0.00;199.00']
Exploring node: D
inserting new children: ['B', 'I']
Open list: ['J;1;223; 0.00;223.00', 'E;2;680; 0.00;680.00', 'G;2;199; 0.00;199.00', 'B;2;410; 0.00;410.00', 'I;2;512; 0.00;512.00']
Exploring node: J
inserting new children: ['F', 'L']
Open list: ['E;2;680; 0.00;680.00', 'G;2;199; 0.00;199.00', 'B;2;410; 0.00;410.00', 'I;2;512; 0.00;512.00', 'F;2;350; 0.00;350.00', 'L;2;416; 0.00;416.00']
Exploring node: E
inserting new children: ['C']
Open list: ['G;2;199; 0.00;199.00', 'B;2;410; 0.00;410.00', 'I;2;512; 0.00;512.00', 'F;2;350; 0.00;350.00', 'L;2;416; 0.00;416.00', 'C;3;973; 0.00;973.00']
Exploring node: G
inserting new children: ['B']
Open list: ['B;2;410; 0.00;410.00', 'I;2;512; 0.00;512.00', 'F;2;350; 0.00;350.00', 'L;2;416; 0.00;416.00', 'C;3;973; 0.00;973.00']
Exploring node: B
inserting new children: ['I']
Open list: ['I;2;512; 0.00;512.00', 'F;2;350; 0.00;350.00', 'L;2;416; 0.00;416.00', 'C;3;973; 0.00;973.00']
Exploring node: I
inserting new children: ['C']
Open list: ['F;2;350; 0.00;350.00', 'L;2;416; 0.00;416.00', 'C;3;973; 0.00;973.00']
Exploring node: F
inserting new children: ['C', 'L']
Open list: ['L;2;416; 0.00;416.00', 'C;3;973; 0.00;973.00']
Exploring node: L
inserting new children: ['C']
Open list: ['C;3;973; 0.00;973.00']
Exploring node: C
inserting new children: ['K']
Open list: ['K;4;1243; 0.00;1243.00']
Exploring node: K
Success! Reached goal node K with path: ['H', 'A', 'E', 'C', 'K']

>>> x=Searcher("10test.txt", searchType="BEST", verbose=True)
Loaded search type BEST with map in file: 10test.txt

>>> x.setStartGoal('h','k')

>>> x.search()
Exploring node: H
inserting new children: ['A', 'D', 'J']
Open list: ['A;1;72; 0.00;72.00', 'D;1;135; 0.00;135.00', 'J;1;223; 0.00;223.00']
Exploring node: A
inserting new children: ['E', 'G']
Open list: ['D;1;135; 0.00;135.00', 'G;2;199; 0.00;199.00', 'J;1;223; 0.00;223.00', 'E;2;680; 0.00;680.00']
Exploring node: D
inserting new children: ['B', 'I']
Open list: ['G;2;199; 0.00;199.00', 'J;1;223; 0.00;223.00', 'B;2;410; 0.00;410.00', 'I;2;512; 0.00;512.00', 'E;2;680; 0.00;680.00']
Exploring node: G
inserting new children: ['B']
Open list: ['J;1;223; 0.00;223.00', 'B;2;410; 0.00;410.00', 'I;2;512; 0.00;512.00', 'E;2;680; 0.00;680.00']
Exploring node: J
inserting new children: ['F', 'L']
Open list: ['F;2;350; 0.00;350.00', 'B;2;410; 0.00;410.00', 'L;2;416; 0.00;416.00', 'I;2;512; 0.00;512.00', 'E;2;680; 0.00;680.00']
Exploring node: F
inserting new children: ['C', 'L']
Open list: ['B;2;410; 0.00;410.00', 'L;2;416; 0.00;416.00', 'I;2;512; 0.00;512.00', 'C;3;628; 0.00;628.00', 'E;2;680; 0.00;680.00']
Exploring node: B
inserting new children: ['I']
Open list: ['L;2;416; 0.00;416.00', 'I;2;512; 0.00;512.00', 'C;3;628; 0.00;628.00', 'E;2;680; 0.00;680.00']
Exploring node: L
inserting new children: ['C']
Open list: ['I;2;512; 0.00;512.00', 'C;3;550; 0.00;550.00', 'E;2;680; 0.00;680.00']
Exploring node: I
inserting new children: ['C']
Open list: ['C;3;550; 0.00;550.00', 'E;2;680; 0.00;680.00']
Exploring node: C
inserting new children: ['E', 'K']
Open list: ['E;2;680; 0.00;680.00', 'K;4;820; 0.00;820.00']
Exploring node: E
inserting new children: []
Open list: ['K;4;820; 0.00;820.00']
Exploring node: K
Success! Reached goal node K with path: ['H', 'J', 'L', 'C', 'K']

>>> x=Searcher("10test.txt", searchType="A*", verbose=True)
Loaded search type A* with map in file: 10test.txt

>>> x.setStartGoal('h','k')

>>> x.search()
Exploring node: H
inserting new children: ['A', 'D', 'J']
Open list: ['J;1;223;504.47;727.47', 'D;1;135;596.16;731.16', 'A;1;72;710.03;782.03']
Exploring node: J
inserting new children: ['F', 'L']
Open list: ['D;1;135;596.16;731.16', 'L;2;416;349.17;765.17', 'A;1;72;710.03;782.03', 'F;2;350;495.23;845.23']
Exploring node: D
inserting new children: ['B', 'I']
Open list: ['L;2;416;349.17;765.17', 'A;1;72;710.03;782.03', 'F;2;350;495.23;845.23', 'I;2;512;383.71;895.71', 'B;2;410;838.02;1248.02']
Exploring node: L
inserting new children: ['C', 'F']
Open list: ['C;3;550;230.79;780.79', 'A;1;72;710.03;782.03', 'F;2;350;495.23;845.23', 'I;2;512;383.71;895.71', 'B;2;410;838.02;1248.02']
Exploring node: C
inserting new children: ['E', 'F', 'I', 'K']
Open list: ['A;1;72;710.03;782.03', 'K;4;820; 0.00;820.00', 'F;2;350;495.23;845.23', 'I;2;512;383.71;895.71', 'E;4;843;295.63;1138.63', 'B;2;410;838.02;1248.02']
Exploring node: A
inserting new children: ['E', 'G']
Open list: ['K;4;820; 0.00;820.00', 'F;2;350;495.23;845.23', 'I;2;512;383.71;895.71', 'G;2;199;766.99;965.99', 'E;2;680;295.63;975.63', 'B;2;410;838.02;1248.02']
Exploring node: K
Success! Reached goal node K with path: ['H', 'J', 'L', 'C', 'K']

>>> x=Searcher("50test.txt", searchType="DEPTH", verbose=False)
Loaded search type DEPTH with map in file: 50test.txt

>>> x.setStartGoal('s','c')

>>> x.search()
Success! Reached goal node C with path: ['S', 'AB', 'AF', 'V', 'AG', 'C']
#+end_src

** Extra credit

In the search method, save the solution path to a text file:
- for input file called 10test.txt, solution file should be called
  10test_path.txt,
- for input file called x.txt, solution file should be called
  x_path.txt
- format of solution path output file should be plain text with one
  line, and a comma separating each city.
- Use the following code at the bottom of your python script, to get
  input arguments from the command line:

#+begin_src python
if __name__ == "__main__":
    prog, inFile, searchType, start, goal = sys.argv
    s=Searcher(inFile, searchType=searchType)
    s.setStartGoal(start, goal)
    s.search()
#+end_src

Implement a stats() method for your Searcher class, and use it to
report the following for each map and search type:

#+begin_src python
>>> x.stats()
Search Type: DEPTH.  Map file: 10test.txt  Total Nodes in Graph:12
Start node: H  ;  Goal node(s): ['K']
Searched total of 12 nodes out of total of 12 in graph
Ended at Node: K with path cost: 1243
Path (5): ['H', 'A', 'E', 'C', 'K']
  Frontier size: Average=  2.67 ; Max size= 6
  Depth of search:  Average=  3.83 ; Max Depth= 6
  Average branching factor=  2.75 

Order of Node Expansion: ['H', 'A', 'E', 'C', 'F', 'J', 'L', 'I', 'B', 'D', 'G', 'K']
#+end_src
